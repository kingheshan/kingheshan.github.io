[{"title":"CSS Box Model","date":"2017-04-10T07:08:34.000Z","path":"2017/04/10/CSS-Box-Model/","text":"CSS 可以说是页面表现的基础， CSS 可以控制布局，控制元素的渲染。 那布局是讲在电影画面构图中，对环境的布置、人物地位的调度、人物之间的关系、人物和景物的关系等的安排。大同小异，CSS 的布局也是一样。 CSS的布局，包含两个大部分： 元素：元素及其组成，类似电影布局中人物的高矮胖瘦、衣着配饰等，以及场景中的桌椅板凳，物品等等。 定位：元素的位置， 类似电影场景的中对环境的设置，人物作为元素，他们之间的关系会影响其在场景中的位置。 总的说来，CSS 的布局比电影场景布局简单的多，因为 CSS 中要控制的元素都是死的，而人是活的有思想的（无思想的道具除外~~）。 元素和框模型当我们观察页面的构成元素的时候，发现页面中经常包括、SPAN、DIV、TABLE、 INPUT、IMG等这些元素。 仔细观察每个元素，它们的形状都是矩形的，严格的说，元素形成了一个矩形的区域，这个区域就是 CSS 中最基本的布局要素， 常被称作 “box”，你可以在很多 W3C CSS2.1 规范的原文中看到 “box” 这个字眼。那我们这次要聊的就是关于 “box” 组成及其变化的一系列规则，也就是今天要讲的内容：”Box Module”，通常被叫做“盒子模型”，有的地方被译作“框模型”。 因为 W3C 的很多地方用到了 “box” 这个词，有些地方译作“盒子”不大通顺，所以我们统统译作“框”。页面中每个元素都是一个框。 本部分主要包括两部分：框的组成以及相关特性( property )，外边距折叠( Collapsing margins )。 ###结构 为了给文档树中的各个元素排版定位（布局），浏览器会根据渲染模型为每个元素生成四个嵌套的矩形框， 分别称作 content box、padding box、border box 和 margin box，它们是不可分割的，并可能会重合， 这就是 CSS 规范中描述的“框模型”（box model）。它是以 CSS 的角度去看一个元素被渲染后的抽象形态。 上面的大框，代表一个元素生成的矩形区域( box )，每一个 box 都包括一个 content 区域（元素的内容，如文本，图形等）以及环绕其四周的 padding (元素的内边距，填充部分)、border (元素的边框) 和 margin (元素的外边距) 区域。 ###边界 上述四个区域（content、 padding、border 和 margin）分别有他们自己的边界，细化来说，每个区域都有 top、right、bottom、left 四个边界。 Content 边界/内边界：Content 边界环绕在由该元素的宽和高决定的一个矩形上，这个尺寸通常由该元素渲染后的内容决定。 这四个 content 边界组成的矩形框就是该元素的 content box。 Padding 边界：Padding 边界环绕在该元素的 padding 区域的四周，顾名思义，填充背景色，在此范围内有效。如果 padding 的宽度为0， 则 padding 边界与 content 边界重合。这四个 padding 边界组成的矩形框就是该元素的 Padding box。 Border 边界：Border 边界环绕在该元素的 border 区域的四周，如果 border 的宽度为0，则 border 边界与 padding 边界重合。 这四个 border 边界组成的矩形框就是该元素的 border box。 Margin 边界/外边界：Margin 边界环绕在该元素的 margin 区域的四周，如果 margin 的宽度为0，则 margin 边界与 border 边界重合。 这四个 margin 边界组成的矩形框就是该元素的 margin box。 CSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？ W3C标准盒模型元素尺寸在W3C标准盒模型中，一个元素框的实际所占空间大小是这样来计算的： 1234567891011外盒尺寸计算（元素所占空间尺寸）Element空间高度 = content height + padding + border + marginElement空间宽度 = content width + padding + border + margin内盒尺寸计算（元素本身大小）Element Height = content height + padding + border （Height为内容高度）Element Width = content width + padding + border （Width为内容宽度） IE盒模型传统下Box Model（IE6以下，不含IE6版本或“QuirksMode下IE5.5+”）1234567891011/*外盒尺寸计算（元素空间尺寸）*/Element空间高度 = content Height + margin (Height包含了元素内容宽度，边框宽度，内距宽度)Element空间宽度 = content Width + margin (Width包含了元素内容宽度、边框宽度、内距宽度)/*内盒尺寸计算（元素大小）*/Element Height = content Height(Height包含了元素内容宽度，边框宽度，内距宽度)Element Width = content Width(Width包含了元素内容宽度、边框宽度、内距宽度) 一张图对比出W3C标准盒模型和IE盒模型的区别： 幸好对于现代web开发者来说不用考虑ie6包括以下的浏览器了(PS:因为IE6已结退出历史舞台了)。 box-sizing最流行的盒布局属性为什么是box-sizing来了就成为最流行的盒布局属性呢，其实它没什么神奇的，只不过它的值包含了W3C标准盒模型和IE的怪异模型，而且有了它之后我们通常使用的就是IE的怪异盒模型的形式(border-box)。 举个例子： 在之前，我们有这样一个盒子： 它的宽度为25%，但有的时候我们想给它加个边框： 此时在计算它的宽度，你需要计算下，如果说即使加了边框之后，我也想保证盒子的宽度为25%呢，这时候你就可以考虑使用box-sizing:border-box来解决，这样你的布局就不会乱。 接着可以将这4个盒子放到一排，即使你改变元素的边框包括内边距： 所以说box-sizing来了之后可以让我们更好的排版我们的页面，而不用考虑过多的问题。 项目中通常会将其放置在重置文件中，保证文档中所有的元素使用的都是border-box的形式。 1234567/* apply a natural box layout model to all elements, but allowing components to change */html &#123; box-sizing: border-box;&#125;*, *:before, *:after &#123; box-sizing: inherit;&#125;","tags":[]},{"title":"文本阴影text-shadow","date":"2017-04-09T04:36:24.000Z","path":"2017/04/09/文本阴影text-shadow/","text":"在css3之前没有提供文本阴影这个属性之前，想实现这样的效果，要么我们需要使用PS制作成图片，要么需要使用双重内容模拟文本阴影。那这两种方式其实都不是很合适，直到CSS3新增的这个text-shadow属性，让我们可以直接实现这种文本阴影效果。 text-shadow语法解析 第一个参数是水平方向的偏移量，正值向右，负值向左。 第二个参数是垂直方向偏移量，正值向下，负值向上。 第三个参数是阴影模糊半径，代表阴影向外模糊的范围，值只能为正数，0代表不模糊，值越大阴影向外模糊的范围就越大，阴影的边缘就越模糊。 第四个是颜色，指定阴影的颜色，可以使用透明色。 那我们可以先借助工具来看看这个阴影到底是如何制作的，熟悉下我们的参数如何使用。 这里给大家推荐个CSS3 Generator，里面就包括了text-shadow的生成器。接着我们可以自己尝试下制作一个单文本阴影。 HTML123&lt;h2 class=\"text text-1\"&gt;Simple Sharp Text Shadow&lt;/h2&gt;&lt;h2 class=\"text text-2\"&gt;Fuzzy Text Shadow&lt;/h2&gt;&lt;h2 class=\"text text-3\"&gt;Text Shadow To Improve Readbility&lt;/h2&gt; CSS123456789101112131415161718192021222324body &#123; background-color: #F5F5F5; color: #555; text-align: center; font-size: 2em; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;&#125;h2 &#123; font-weight: 900;&#125;/*单行文本阴影*/.text-1 &#123; text-shadow: .1em .1em rgba(0, 0, 0, 0.3);&#125;.text-2 &#123; text-shadow: .1em .1em .2em rgba(0, 0, 0, 0.6);&#125;.text-3 &#123; color: white; text-shadow: 0.075em 0.08em 0.1em rgba(0, 0, 0, 1);&#125; 当然我们还可以做出更炫的效果，可以使用多重阴影。多个阴影效果之间以逗号连接。 HTML1234&lt;h2 class=\"text text-4\"&gt;Multiple Shadows&lt;/h2&gt;&lt;h2 class=\"text text-5\"&gt;Neon Effect&lt;/h2&gt;&lt;h2 class=\"text text-6\"&gt;Shadow As Text Outline&lt;/h2&gt;&lt;h2 class=\"text text-7\"&gt;Blurred Text&lt;/h2&gt; 123456789101112131415161718.text-4 &#123; text-shadow: 0.2em 0.5em 0.1em #ddd, -0.3em 0.1em 0.1em #aaa, 0.4em -0.3em 0.1em #888;&#125;.text-5 &#123; color: #54a; text-shadow: 0 0 0.5em #87F, 0 0 0.5em #87F, 0 0 0.5em #87F;&#125;.text-6 &#123; color: #eee; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black&#125;.text-7 &#123; color: transparent; text-shadow: 0 0 .1em rgba(0, 0, 0, 0.2), 0 0 .2em rgba(0, 0, 0, 0.2);&#125; 那更酷炫的效果就需要靠大家来想象啦，放飞你们的idea吧~ 资源列表 CSS-Tricks text-shadow CSS3 Generator text-shadow codepen Animated Rainbow Text-Shadows codepen","tags":[]},{"title":"CSS使用方式","date":"2017-04-08T14:38:49.000Z","path":"2017/04/08/CSS使用方式/","text":"这一节我们聊聊如何使用CSS。 CSS使用方式在css中一共提供了3种使用方式： 外部样式 内部样式 内联样式 外部样式首先我们可以将css样式书写于一个单独css文件中，css文件的扩展名为.css结尾。接着可以通过标记链接外部这个文件即可。将标记书写于之间。1.css123h1&#123; color:red;&#125; HTML123&lt;head&gt;&lt;link href=\"1.css\" rel=\"stylesheet\"&gt;&lt;/head&gt; 这种形式就相当于把1.css中的代码复制到标记所写的位置上了。 内部样式第二种方式可以使用内部样式，将样式书写于当前文档内部，放置在元素之间，同样的元素需要放到之间。HTML1234567&lt;head&gt;&lt;style&gt; h1&#123; color:red; &#125;&lt;/style&gt;&lt;/head&gt; 内联样式第三种内联样式，是直接将样式书写于元素上，通过style属性来定义样式。 HTML1&lt;h1 style=\"color:red;\"&gt;01Style&lt;/h1&gt; 可以看到三种方式都可以使用到CSS，但是我们到底需要使用哪种方式呢？ 在实际的开发中，我们会把相关样式写到单独的文件中，接着通过标记引入外部样式表。这样的好处利于维护和管理，而且可以将结构和表现相分离。 有的时候我们也可以针对单独页面在单独文档内部书写一些样式，这时候我们可以使用内部样式，包括我们课上做的一些小案例，我们都使用内部样式的形式来写。 最不建议使用行内样式，不利于维护，而且代码混乱","tags":[]}]