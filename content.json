[{"title":"html5简介","date":"2017-06-19T15:17:34.000Z","path":"2017/06/19/html5简介/","text":"#HTML5&amp;CSS3 什么是HTML5？ HTML5新特性简介？ 为什么选择HTML5？ 浏览器的兼容性？ HTML5与HTML4的区别? 浏览器的兼容性 ##一、什么是HTML5？ HTML5 是对 HTML 标准的第五次修订，目前仍未完工。其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。HTML5 的语法是向后兼容的。 但论及 HTML5 时，大部分开发者所指的并不仅仅是这个新标准，而是（如 Jeremy Keith 说） doing anything cool (on the web) 做这些“酷”的东西需要用到的技术和标准，除了 HTML5 标准外，还包括 CSS3 的一些新属性，以及一些新的 API。 总结来说： 标准，html5并不是一种新的语言而是一个新的标准，新的api，新的规范 革新，html5相对与之前的版本带来了大量的更新，让复杂的事情变简单，让不可能变为可能 过去的html就像我们平时看到路上普通小汽车，而HTML5就像是大黄蜂、擎天柱，漂亮、美观、还有很多新特性，其中一些新内容能够在不久将来进入我们的生活，也可能现在就已经进入到我们的生活了。 ##二、HTML5新特性？ HTML5的新特性可以归纳为以下几点： 语义：能够让你更恰当地描述你的内容是什么。 连通性：能够让你和服务器之间通过创新的新技术方法进行通信。 离线 &amp; 存储：能够让网页在客户端本地存储数据以及更高效地离线运行。 多媒体：使 video 和 audio 成为了在所有 Web 中的一等公民。 2D/3D 绘图 &amp; 效果：提供了一个更加分化范围的呈现选择。 性能 &amp; 集成：提供了非常显著的性能优化和更有效的计算机硬件使用。 设备访问 Device Access：能够处理各种输入和输出设备。 样式设计: 让作者们来创作更加复杂的主题吧！ ##三、为什么选择HTML5？ 至于为什么选择HTML5，这里给大家总结了10个理由： 易用 俩个原因使得使用HTML5创建网站更加简单：语义上及其ARIA。新的HTML标签像, ，，， 等等，使得阅读者更加容易去访问内容。在以前，即使你定义了class或者ID你的阅读者也没有办法去了解给出的一个div究竟是什么。使用新的语义学的定义标签，你可以更好的了解HTML文档，并且创建一个更好的使用体验。ARIA是一个W3C的标准主要用来对HTML文章中的元素指定“角色“，通过角色属性来创建重要的页面地形例如,header，footer，navigation或者aritcle很有必要。这一点曾经被忽略掉了并且没有被广泛使用，因为事实上并不验证。然而，HTML5将会验证这样属性。同时，HTML5将会内建这些角色并且无法不覆盖。 视频和音频支持 忘了flash和其它第三方应用吧，让你的视频和音频通过HTML5标签\\和\\来访问资源。正确播放媒体一直都是一个非常可怕的事情，你需要使用\\和\\标签，并且为了它们能正确播放必须赋予一大堆的参数。 doctype 就是doctype，没有更多内容了。是不是非常简答？不需要拷贝粘贴一堆无法理解的代码，也没有多余的内容。最大的好消息在于，除了简单，它能在每一个浏览器中正常工作即使是名声狼藉的IE6，虽说我们现在已经不用支持IE6了。 聪明的存储 HTML5中最酷的特性就是本地存储。有一点像比较老的技术cookie和客户端数据库的融合。它比cooke更好用因为支持多个windows存储，它拥有更好的安全和性能，即使浏览器关闭后也可以保存。因为它是个客户端的数据库，你不用担心用户删除任何cookie，并且所有主流浏览器都支持。本地存储对于很多情况来说都不错， 它是HTML5工具中一个不需要第三方插件实现的。能够保存数据到用户的浏览器中意味你可以简单的创建一些应用特性例如：保存用户信息，缓存数据，加载用户上一次的应用状态。 更好的互动 我们都喜欢更好的互动，我们都喜欢对于用户有反馈的动态网站，用户可以享受互动的过程。输入\\，HTML5的画图标签允许你做更多的互动和动画，就像我们使用Flash达到的效果。除了\\，HTML5同样也拥有很多API允许你创建更加好的用户体验并且更加动态的web应用程序。 游戏开发 你可以使用HTML5的\\开发游戏。HTML5提供了一个非常伟大的，移动友好的方式去开发有趣互动的游戏。如果你开发Flash游戏，你就会喜欢上HTML5的游戏开发。像曾经红极一时的围住神经猫等H5游戏。 它是未来 说了这么多，其实最大的原因就是HTML5是未来，所以从现在开始就要使用HTML5，不要掉队了！ ##四、HTML5与HTML4的区别 1.语法的改变 1.1DOCTYPE的声明&gt; 在XHTML1.0中DOCTYPE的声明有如下三种 严格类型： &lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; 标准类型 &lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; 框架集 &lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt; 而在HTML5中只需要向上面介绍的，简单的写上: &lt;!DOCTYPE html&gt; 1.2字符编码&gt; XHTML中指定字符编码 \\ HTML5中指定字符编码 \\ 1.3 元素标记在HTML5中，元素的标记可以省略。具体的说就是，元素的标记分为不允许写结束标记、可以省略结束标记和开始标记和结束标记都可以省略三种类型。 不允许写结束标记的元素：area、base、br、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr。(不允许写结束标记的元素是指不允许使用开始标记和结束标记括起来的，只允许使用&lt;元素/&gt;的形式进行书写。像\\这就是错误的,正确的方式就是\\) 可以省略结束标记的元素：li、dt、dd、p、rt、rp、optgroup、option、colgroup、thead、tbody、tfoot、tr、td、th。 可以省略全部标记的元素：html、head、body、colgroup、tbody。(就是该元素可以完全被省略，可以不写。即使不写它也会在文档中以隐士方式存在。但是还是建议大家写上。) 1.4 具有布尔属性值的属性对于具有boolean值的属性，像selected、checked、disabled这样的，当只写属性不写属性值得实惠，表示属性值为true，或则将属性名和属性值写成一样的或者空字符都代表为true；默认不写为false。 123&lt;input type=\"checkbox\" checked/&gt;&lt;input type=\"checkbox\" checked=\"checked\"/&gt;&lt;input type=\"checkbox\" checked=\"\"/&gt; 1.5 省略引号当属性值不包含特殊字符像单引号、双引号、大于号、小于号、等号等，可以省略两边的引号。(但是推荐使用双引号，保证好的代码习惯) 1-demo.html案例 1234567891011121314151617181920&lt;!-- &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;HTML5 DEMO&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;这是HTML5标准骨架&lt;/h1&gt; &lt;input type=\"text\" checked&gt; &lt;input type=\"text\" checked=\"checked\"&gt; &lt;input type=\"text\" checked=\"\"&gt;&lt;/body&gt;&lt;/html&gt; --&gt;&lt;!-- 当然我们也可以省略极简的形式 --&gt;&lt;!doctype html&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;HTML5极简的形式&lt;/title&gt;&lt;p&gt;可以省略结束标记&lt;br&gt;但是不推荐这么写 1.6 新增元素 HTML5中新增的语义化标签：header, hgroup, nav, section, article, details, figure, figcaption, aside, time, mark, audio, video, source, track, bdi, canvas, command, datalist, summary, embed, keygen, meter, output, progress, rp, rt, ruby这些标签我们会在后续课程中来进行详细的讲解。 1.7 废弃元素废弃了能使用CSS替代的元素，像basefont、big、center、s、strike、u、tt这些元素，由于它们的功能纯粹是为了画面展示服务的，而HTML5中提倡把画面展示功能放在CSS样式中统一进行编辑，所以将这些元素废弃了。 还有就是不在使用frame框架爱，对于像frameset元素、frame元素与noframe元素都废除了，因为frame框架对于网页可用性存在影响，所以HTML5中已经不在支持frame框架，只支持iframe框架。 还有一些部分浏览器支持的元素也被废弃了，像applet、bgsound、blink、marquee等，只被部分浏览器支持的这些元素由于其兼容性不好，也被废弃了，可以使用其他元素或者方案来代替。 最后就是一些其它不常用的元素也被废除了，使用新的元素替代，像rb元素，使用ruby元素替代；acronym元素，使用abbr元素替代；dir元素使用ul元素替代；isindex元素使用form元素与input元素结合的形式替代；listing元素使用pre元素替代；xmp元素使用code元素替代；nexid元素使用GUIDS替代等。这些元素我们只作为了解即可。 1.8 HTML5中新增属性 表单相关的属性 对input（type=text）、select、textarea与button指定autofocus属性。它以指定属性的方式让元素在画面打开时自动获得焦点。 对input（type=text）、textarea指定placeholder属性，它会对用户的输入进行提示，提示用户可以输入的内容。 对input、output、select、textarea、button与fieldset指定form属性。它声明属于哪个表单，然后将其放置在页面的任何位置，而不是表单之内。 对input（type=text）、textarea指定required属性。该属性表示用户提交时进行检查，检查该元素内必定要有输入内容。 为input标签增加几个新的属性：autocomplete、min、max、multiple、pattern与step。还有list属性与datalist元素配合使用；datalist元素与autocomplete属性配合使用。multiple属性允许上传时一次上传多个文件； pattern属性用于验证输入字段的模式，其实就是正则表达式。step 属性规定输入字段的合法数字间隔（假如 step=”3”，则合法数字应该是 -3、0、3、6，以此类推），step 属性可以与 max 以及 min 属性配合使用，以创建合法值的范围。 为input、button元素增加formaction、formenctype、formmethod、formnovalidate与formtarget属性。用户重载form元素的action、enctype、method、novalidate与target属性。为fieldset元素增加disabled属性，可以把它的子元素设为disabled状态。 为input、button、form增加novalidate属性，可以取消提交时进行的有关检查，表单可以被无条件地提交。 链接相关属性 为a、area增加media属性。规定目标 URL 是为什么类型的媒介/设备进行优化的。该属性用于规定目标 URL 是为特殊设备（比如 iPhone）、语音或打印媒介设计的。该属性可接受多个值。只能在 href 属性存在时使用。 为area增加herflang和rel属性。hreflang 属性规定在被链接文档中的文本的语言。只有当设置了 href 属性时，才能使用该属性。注释：该属性是纯咨询性的。rel 属性规定当前文档与被链接文档/资源之间的关系。只有当使用 href 属性时，才能使用 rel 属性。 为link增加size属性。sizes 属性规定被链接资源的尺寸。只有当被链接资源是图标时 (rel=”icon”)，才能使用该属性。该属性可接受多个值。值由空格分隔。 为base元素增加target属性，主要是保持与a元素的一致性。 其他属性 为ol增加reversed属性，它指定列表倒序显示。 为meta增加charset属性 为menu增加type和label属性。label为菜单定义一个课件的标注，type属性让才当可以以上下文菜单、工具条与列表cande但三种形式出现。 为style增加scoped属性。它允许我们为文档的指定部分定义样式，而不是整个文档。如果使用 “scoped” 属性，那么所规定的样式只能应用到 style 元素的父元素及其子元素。 为script增减属性，它定义脚本是否异步执行。async 属性仅适用于外部脚本（只有在使用 src 属性时）有多种执行外部脚本的方法：如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）如果不使用 async 且 defer=”defer”：脚本将在页面完成解析时执行如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本 为html元素增加manifest，开发离线web应用程序时他与API结合使用，定义一个URL，在这个URL上描述文档的缓存信息。 为iframe增加三个属性，sandbox、seamless、srcdoc。用来提高页面安全性，防止不信任的web页面执行某些操作。 1.9 HTML5中废除属性 HTML4中一些属性在HTML5中不再被使用，而是采用其他属性或其他方式进行替代。 在HTML 4中使用的属性 使用该属性的元素 在HTML 5中的替代方案 rev link、a rel charset link、a 在被链接的资源的中使用HTTP Content-type头元素 shape、coords a 使用area元素代替a元素 longdesc img、iframe 使用a元素链接到校长描述 target link 多余属性，被省略 nohref area 多余属性，被省略 profile head 多余属性，被省略 version html 多余属性，被省略 name img id scheme meta 只为某个表单域使用scheme archive、chlassid、codebose、codetype、declare、standby object 使用data与typc属性类调用插件。需要使用这些属性来设置参数时，使用param属性 valuetype、type param 使用name与value属性，不声明之的MIME类型 axis、abbr td、th 使用以明确简洁的文字开头、后跟详述文字的形式。可以对更详细内容使用title属性，来使单元格的内容变得简短 scope td 在被链接的资源的中使用HTTP Content-type头元素 align caption、input、legend、div、h1、h2、h3、h4、h5、h6、p 使用CSS样式表替代 alink、link、text、vlink、background、bgcolor body 使用CSS样式表替代 align、bgcolor、border、cellpadding、cellspacing、frame、rules、width table 使用CSS样式表替代 align、char、charoff、height、nowrap、valign tbody、thead、tfoot 使用CSS样式表替代 align、bgcolor、char、charoff、height、nowrap、valign、width td、th 使用CSS样式表替代 align、bgcolor、char、charoff、valign tr 使用CSS样式表替代 align、char、charoff、valign、width col、colgroup 使用CSS样式表替代 align、border、hspace、vspace object 使用CSS样式表替代 clear br 使用CSS样式表替代 compace、type ol、ul、li 使用CSS样式表替代 compace dl 使用CSS样式表替代 compace menu 使用CSS样式表替代 width pre 使用CSS样式表替代 align、hspace、vspace img 使用CSS样式表替代 align、noshade、size、width hr 使用CSS样式表替代 align、frameborder、scrolling、marginheight、marginwidth iframe 使用CSS样式表替代 autosubmit menu &nbsp; 1.10 全局属性 在HTML5中新增了全局属性的概念。所谓全局属性就是指可以对任何元素都是用的属性。可以看看下边新增的这些全局属性： contentEditable属性 contentEditable属性是由微软开发、被其它浏览器反编译并投入应用的一个全局属性。这个属性主要功能是是否允许用户编辑元素中的内容。属性是可读/可写的。继承的属性有一个默认值。允许用户编辑元素（可以获得焦点的元素）中的内容。bool类型：true（默认） or false。继承。 2-contentEditable.html 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;contentEditable内容是否可编辑&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;测试内容是否可编辑&lt;/h1&gt; &lt;p&gt;这是一个可编辑的用户列表&lt;/p&gt; &lt;ul contenteditable=\"true\"&gt; &lt;li&gt;张三&lt;/li&gt; &lt;li&gt;李四&lt;/li&gt; &lt;li&gt;王五&lt;/li&gt; &lt;li&gt;赵六&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; isContentEditable属性 检测元素是否可编辑，如果contentEditable为true，则其为true；否则为false； +designMode属性 用来设置整个页面是否可以被编辑，为true时，页面中所有支持contentEditable属性的元素都变为可编辑状态，该属性只能在js中编辑，属性值”on”、”off”。 1document.designMode=\"on\" hidden属性 在HTML5中所有元素可以使用hidden属性，来设置浏览器是否渲染该元素。 3-hidden.html 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;hidden属性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 hidden=\"true\"&gt;可以通过hidden属性隐藏该元素&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; speelcheck属性 这个属性主要用来对用户输入文本进行拼写和语法检查，针对input=text和textarea两个元素的属性。 4-speelcheck.html 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;speelcheck属性检测拼写错误&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"text\" name=\"test\" id=\"\" spellcheck=\"true\"&gt; &lt;hr&gt; &lt;textarea name=\"\" id=\"\" cols=\"30\" spellcheck=\"true\" rows=\"10\"&gt;&lt;/textarea&gt;&lt;/body&gt;&lt;/html&gt; tabindex属性 tabindex是开发中的一个基本概念，当不断敲击Tab键让窗口或页面中的控件获得焦点，对窗口或页面中的所有控件进行遍历的时候，每一个控件的tabindex表示该控件是第几个被访问到的。在之前的时候这个属性在编辑网页的时候是非常有用的，但现在的控件的遍历属性是有元素在页面上所处的位置决定的，所以就不再需要了。但是tabindex还有另外一个作用，在默认情况下，只有链接元素与表单元素可以通过按tab键获得焦点。如果对其它元素使用tabindex属性后，也能让元素获得焦点，那么当脚本中执行focus()的时候，就可以让改元素获得焦点了。但这样做会产生一个副作用：该元素也可以通过tab键获得焦点，这有时候就不是我们想要的结果。但是我们可以把元素的tabindex值设为-1，这个问题就解决了。tabindex设置为-1后，仍然可以通过编程的方式让元素获得焦点，但是按下tab键的时候这个元素就不会获得焦点了，这个在复杂的web应用程序中还是比较有用的。像在HTML4中，-1是一个无用的属性值，但是到了HTML5中，通过巧妙的时候用却可以让这个属性值获得极大的应用。 六、浏览器的兼容性其实针对于浏览器对于HTML5的兼容性问题，目前大部分主流浏览器支持的很不错，未来也会越来越好，因为HTML5慢慢的走向标准，浏览器厂商也在向这个标准去靠拢。如果想检测某些元素或者特性浏览器是否支持，我们可以通过查询HTML5浏览器兼容性表，也可以检测浏览器对HTML5的支持性等途径。 caniuse 查询不同浏览器的兼容性 html5test 给浏览器对HTML5支持性打分的 bestvpn 检测HTML5支持性的 Modernizr检测 HTML5/CSS3 本地支持的 Javascript 库 wiki layout engine)布局引擎对比 参考资料： 1.w3c的html4和html5的区别","tags":[]},{"title":"CSS Box Model","date":"2017-04-10T07:08:34.000Z","path":"2017/04/10/CSS-Box-Model/","text":"CSS 可以说是页面表现的基础， CSS 可以控制布局，控制元素的渲染。 那布局是讲在电影画面构图中，对环境的布置、人物地位的调度、人物之间的关系、人物和景物的关系等的安排。大同小异，CSS 的布局也是一样。 CSS的布局，包含两个大部分： 元素：元素及其组成，类似电影布局中人物的高矮胖瘦、衣着配饰等，以及场景中的桌椅板凳，物品等等。 定位：元素的位置， 类似电影场景的中对环境的设置，人物作为元素，他们之间的关系会影响其在场景中的位置。 总的说来，CSS 的布局比电影场景布局简单的多，因为 CSS 中要控制的元素都是死的，而人是活的有思想的（无思想的道具除外~~）。 元素和框模型当我们观察页面的构成元素的时候，发现页面中经常包括、SPAN、DIV、TABLE、 INPUT、IMG等这些元素。 仔细观察每个元素，它们的形状都是矩形的，严格的说，元素形成了一个矩形的区域，这个区域就是 CSS 中最基本的布局要素， 常被称作 “box”，你可以在很多 W3C CSS2.1 规范的原文中看到 “box” 这个字眼。那我们这次要聊的就是关于 “box” 组成及其变化的一系列规则，也就是今天要讲的内容：”Box Module”，通常被叫做“盒子模型”，有的地方被译作“框模型”。 因为 W3C 的很多地方用到了 “box” 这个词，有些地方译作“盒子”不大通顺，所以我们统统译作“框”。页面中每个元素都是一个框。 本部分主要包括两部分：框的组成以及相关特性( property )，外边距折叠( Collapsing margins )。 ###结构 为了给文档树中的各个元素排版定位（布局），浏览器会根据渲染模型为每个元素生成四个嵌套的矩形框， 分别称作 content box、padding box、border box 和 margin box，它们是不可分割的，并可能会重合， 这就是 CSS 规范中描述的“框模型”（box model）。它是以 CSS 的角度去看一个元素被渲染后的抽象形态。 上面的大框，代表一个元素生成的矩形区域( box )，每一个 box 都包括一个 content 区域（元素的内容，如文本，图形等）以及环绕其四周的 padding (元素的内边距，填充部分)、border (元素的边框) 和 margin (元素的外边距) 区域。 ###边界 上述四个区域（content、 padding、border 和 margin）分别有他们自己的边界，细化来说，每个区域都有 top、right、bottom、left 四个边界。 Content 边界/内边界：Content 边界环绕在由该元素的宽和高决定的一个矩形上，这个尺寸通常由该元素渲染后的内容决定。 这四个 content 边界组成的矩形框就是该元素的 content box。 Padding 边界：Padding 边界环绕在该元素的 padding 区域的四周，顾名思义，填充背景色，在此范围内有效。如果 padding 的宽度为0， 则 padding 边界与 content 边界重合。这四个 padding 边界组成的矩形框就是该元素的 Padding box。 Border 边界：Border 边界环绕在该元素的 border 区域的四周，如果 border 的宽度为0，则 border 边界与 padding 边界重合。 这四个 border 边界组成的矩形框就是该元素的 border box。 Margin 边界/外边界：Margin 边界环绕在该元素的 margin 区域的四周，如果 margin 的宽度为0，则 margin 边界与 border 边界重合。 这四个 margin 边界组成的矩形框就是该元素的 margin box。 CSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？ W3C标准盒模型元素尺寸在W3C标准盒模型中，一个元素框的实际所占空间大小是这样来计算的： 1234567891011外盒尺寸计算（元素所占空间尺寸）Element空间高度 = content height + padding + border + marginElement空间宽度 = content width + padding + border + margin内盒尺寸计算（元素本身大小）Element Height = content height + padding + border （Height为内容高度）Element Width = content width + padding + border （Width为内容宽度） IE盒模型传统下Box Model（IE6以下，不含IE6版本或“QuirksMode下IE5.5+”）1234567891011/*外盒尺寸计算（元素空间尺寸）*/Element空间高度 = content Height + margin (Height包含了元素内容宽度，边框宽度，内距宽度)Element空间宽度 = content Width + margin (Width包含了元素内容宽度、边框宽度、内距宽度)/*内盒尺寸计算（元素大小）*/Element Height = content Height(Height包含了元素内容宽度，边框宽度，内距宽度)Element Width = content Width(Width包含了元素内容宽度、边框宽度、内距宽度) 一张图对比出W3C标准盒模型和IE盒模型的区别： 幸好对于现代web开发者来说不用考虑ie6包括以下的浏览器了(PS:因为IE6已结退出历史舞台了)。 box-sizing最流行的盒布局属性为什么是box-sizing来了就成为最流行的盒布局属性呢，其实它没什么神奇的，只不过它的值包含了W3C标准盒模型和IE的怪异模型，而且有了它之后我们通常使用的就是IE的怪异盒模型的形式(border-box)。 举个例子： 在之前，我们有这样一个盒子： 它的宽度为25%，但有的时候我们想给它加个边框： 此时在计算它的宽度，你需要计算下，如果说即使加了边框之后，我也想保证盒子的宽度为25%呢，这时候你就可以考虑使用box-sizing:border-box来解决，这样你的布局就不会乱。 接着可以将这4个盒子放到一排，即使你改变元素的边框包括内边距： 所以说box-sizing来了之后可以让我们更好的排版我们的页面，而不用考虑过多的问题。 项目中通常会将其放置在重置文件中，保证文档中所有的元素使用的都是border-box的形式。 1234567/* apply a natural box layout model to all elements, but allowing components to change */html &#123; box-sizing: border-box;&#125;*, *:before, *:after &#123; box-sizing: inherit;&#125;","tags":[]},{"title":"文本阴影text-shadow","date":"2017-04-09T04:36:24.000Z","path":"2017/04/09/文本阴影text-shadow/","text":"在css3之前没有提供文本阴影这个属性之前，想实现这样的效果，要么我们需要使用PS制作成图片，要么需要使用双重内容模拟文本阴影。那这两种方式其实都不是很合适，直到CSS3新增的这个text-shadow属性，让我们可以直接实现这种文本阴影效果。 text-shadow语法解析 第一个参数是水平方向的偏移量，正值向右，负值向左。 第二个参数是垂直方向偏移量，正值向下，负值向上。 第三个参数是阴影模糊半径，代表阴影向外模糊的范围，值只能为正数，0代表不模糊，值越大阴影向外模糊的范围就越大，阴影的边缘就越模糊。 第四个是颜色，指定阴影的颜色，可以使用透明色。 那我们可以先借助工具来看看这个阴影到底是如何制作的，熟悉下我们的参数如何使用。 这里给大家推荐个CSS3 Generator，里面就包括了text-shadow的生成器。接着我们可以自己尝试下制作一个单文本阴影。 HTML123&lt;h2 class=\"text text-1\"&gt;Simple Sharp Text Shadow&lt;/h2&gt;&lt;h2 class=\"text text-2\"&gt;Fuzzy Text Shadow&lt;/h2&gt;&lt;h2 class=\"text text-3\"&gt;Text Shadow To Improve Readbility&lt;/h2&gt; CSS123456789101112131415161718192021222324body &#123; background-color: #F5F5F5; color: #555; text-align: center; font-size: 2em; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;&#125;h2 &#123; font-weight: 900;&#125;/*单行文本阴影*/.text-1 &#123; text-shadow: .1em .1em rgba(0, 0, 0, 0.3);&#125;.text-2 &#123; text-shadow: .1em .1em .2em rgba(0, 0, 0, 0.6);&#125;.text-3 &#123; color: white; text-shadow: 0.075em 0.08em 0.1em rgba(0, 0, 0, 1);&#125; 当然我们还可以做出更炫的效果，可以使用多重阴影。多个阴影效果之间以逗号连接。 HTML1234&lt;h2 class=\"text text-4\"&gt;Multiple Shadows&lt;/h2&gt;&lt;h2 class=\"text text-5\"&gt;Neon Effect&lt;/h2&gt;&lt;h2 class=\"text text-6\"&gt;Shadow As Text Outline&lt;/h2&gt;&lt;h2 class=\"text text-7\"&gt;Blurred Text&lt;/h2&gt; 123456789101112131415161718.text-4 &#123; text-shadow: 0.2em 0.5em 0.1em #ddd, -0.3em 0.1em 0.1em #aaa, 0.4em -0.3em 0.1em #888;&#125;.text-5 &#123; color: #54a; text-shadow: 0 0 0.5em #87F, 0 0 0.5em #87F, 0 0 0.5em #87F;&#125;.text-6 &#123; color: #eee; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black&#125;.text-7 &#123; color: transparent; text-shadow: 0 0 .1em rgba(0, 0, 0, 0.2), 0 0 .2em rgba(0, 0, 0, 0.2);&#125; 那更酷炫的效果就需要靠大家来想象啦，放飞你们的idea吧~ 资源列表 CSS-Tricks text-shadow CSS3 Generator text-shadow codepen Animated Rainbow Text-Shadows codepen","tags":[]},{"title":"CSS使用方式","date":"2017-04-08T14:38:49.000Z","path":"2017/04/08/CSS使用方式/","text":"这一节我们聊聊如何使用CSS。 CSS使用方式在css中一共提供了3种使用方式： 外部样式 内部样式 内联样式 外部样式首先我们可以将css样式书写于一个单独css文件中，css文件的扩展名为.css结尾。接着可以通过标记链接外部这个文件即可。将标记书写于之间。1.css123h1&#123; color:red;&#125; HTML123&lt;head&gt;&lt;link href=\"1.css\" rel=\"stylesheet\"&gt;&lt;/head&gt; 这种形式就相当于把1.css中的代码复制到标记所写的位置上了。 内部样式第二种方式可以使用内部样式，将样式书写于当前文档内部，放置在元素之间，同样的元素需要放到之间。HTML1234567&lt;head&gt;&lt;style&gt; h1&#123; color:red; &#125;&lt;/style&gt;&lt;/head&gt; 内联样式第三种内联样式，是直接将样式书写于元素上，通过style属性来定义样式。 HTML1&lt;h1 style=\"color:red;\"&gt;01Style&lt;/h1&gt; 可以看到三种方式都可以使用到CSS，但是我们到底需要使用哪种方式呢？ 在实际的开发中，我们会把相关样式写到单独的文件中，接着通过标记引入外部样式表。这样的好处利于维护和管理，而且可以将结构和表现相分离。 有的时候我们也可以针对单独页面在单独文档内部书写一些样式，这时候我们可以使用内部样式，包括我们课上做的一些小案例，我们都使用内部样式的形式来写。 最不建议使用行内样式，不利于维护，而且代码混乱","tags":[]}]